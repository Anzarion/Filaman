name: GitHub Release

on:
  workflow_call:
    secrets:
      RELEASE_TOKEN:
        description: 'GitHub token for release creation'
        required: true

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio esptool
    
    - name: Install xxd
      run: |
        sudo apt-get update
        sudo apt-get install xxd
    
    - name: Build Firmware
      run: |
        VERSION=$(grep '^version = ' platformio.ini | cut -d'"' -f2)
        
        # Always build firmware and SPIFFS
        echo "Building firmware and SPIFFS..."
        pio run -e esp32dev
        pio run -t buildfs
        
        # Copy firmware binary
        cp .pio/build/esp32dev/firmware.bin .pio/build/esp32dev/upgrade_filaman_firmware_v${VERSION}.bin
        
        # Create SPIFFS binary - direct copy without header
        cp .pio/build/esp32dev/spiffs.bin .pio/build/esp32dev/upgrade_filaman_website_v${VERSION}.bin
        
        # Create full binary (always)
        (cd .pio/build/esp32dev && 
        esptool.py --chip esp32 merge_bin \
          --fill-flash-size 4MB \
          --flash_mode dio \
          --flash_freq 40m \
          --flash_size 4MB \
          -o filaman_full_${VERSION}.bin \
          0x1000 bootloader.bin \
          0x8000 partitions.bin \
          0x10000 firmware.bin \
          0x3D0000 spiffs.bin)
        
        # Verify file sizes
        echo "File sizes:"
        (cd .pio/build/esp32dev && ls -lh *.bin)
    
    - name: Get version from platformio.ini
      id: get_version
      run: |
        VERSION=$(grep '^version = ' platformio.ini | cut -d'"' -f2)
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
      
    - name: Generate Release Notes
      id: release_notes
      run: |
        # Fetch all tags first
        git fetch --tags
        
        # Get all tags sorted by version
        TAGS=($(git tag -l 'v*' --sort=-v:refname))
        CURRENT_TAG="${TAGS[0]}"
        
        # Get previous tag (second in list)
        if [ ${#TAGS[@]} -gt 1 ]; then
          PREVIOUS_TAG="${TAGS[1]}"
          echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
          echo "Changes since $PREVIOUS_TAG:" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          
          # Get commits between previous and current tag
          echo "### Added" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:%s | grep -iE '^(feat|add|new)' | sed 's/^feat: /- /' | sort -u >> $GITHUB_OUTPUT || true
          echo "" >> $GITHUB_OUTPUT
          
          echo "### Fixed" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:%s | grep -iE '^fix' | sed 's/^fix: /- /' | sort -u >> $GITHUB_OUTPUT || true
          echo "" >> $GITHUB_OUTPUT
          
          echo "### Changed" >> $GITHUB_OUTPUT
          git log ${PREVIOUS_TAG}..${CURRENT_TAG} --pretty=format:%s | grep -ivE '^(feat|fix|add|new)' | sed 's/^/- /' | sort -u >> $GITHUB_OUTPUT || true
          echo "EOF" >> $GITHUB_OUTPUT
        else
          # First release or no previous tag
          echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
          echo "Initial Release" >> $GITHUB_OUTPUT
          
          # Add all commits for initial release
          echo "" >> $GITHUB_OUTPUT
          echo "### Added" >> $GITHUB_OUTPUT
          git log --pretty=format:%s | grep -iE '^(feat|add|new)' | sed 's/^feat: /- /' | sort -u >> $GITHUB_OUTPUT || true
          echo "" >> $GITHUB_OUTPUT
          
          echo "### Fixed" >> $GITHUB_OUTPUT
          git log --pretty=format:%s | grep -iE '^fix' | sed 's/^fix: /- /' | sort -u >> $GITHUB_OUTPUT || true
          echo "" >> $GITHUB_OUTPUT
          
          echo "### Changed" >> $GITHUB_OUTPUT
          git log --pretty=format:%s | grep -ivE '^(feat|fix|add|new)' | sed 's/^/- /' | sort -u >> $GITHUB_OUTPUT || true
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ secrets.RELEASE_TOKEN }}
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        cd .pio/build/esp32dev
        
        # Create release with available files
        FILES_TO_UPLOAD=""
        
        # Always add firmware
        if [ -f "upgrade_filaman_firmware_v${VERSION}.bin" ]; then
          FILES_TO_UPLOAD="$FILES_TO_UPLOAD upgrade_filaman_firmware_v${VERSION}.bin"
        fi
        
        # Add SPIFFS and full binary only if they exist
        if [ -f "upgrade_filaman_website_v${VERSION}.bin" ]; then
          FILES_TO_UPLOAD="$FILES_TO_UPLOAD upgrade_filaman_website_v${VERSION}.bin"
        fi
        
        if [ -f "filaman_full_${VERSION}.bin" ]; then
          FILES_TO_UPLOAD="$FILES_TO_UPLOAD filaman_full_${VERSION}.bin"
        fi
        
        # Create release with available files
        if [ -n "$FILES_TO_UPLOAD" ]; then
          gh release create "v${VERSION}" \
            --title "Release ${VERSION}" \
            --notes "${{ steps.release_notes.outputs.CHANGES }}" \
            $FILES_TO_UPLOAD
        else
          echo "Error: No files found to upload"
          exit 1
        fi