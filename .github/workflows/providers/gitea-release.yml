name: Gitea Release

on:
  workflow_call:
    inputs:
      gitea_ref_name:
        required: true
        type: string
      gitea_server_url:
        required: true
        type: string
      gitea_repository:
        required: true
        type: string
    secrets:
      GITEA_TOKEN:
        required: true

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio esptool
    
    - name: Build Firmware
      run: |
        pio run -t buildfs  # Build SPIFFS
        pio run            # Build firmware
        
    - name: Prepare binaries
      run: |
        cd .pio/build/esp32dev
        
        # Create OTA binary (firmware only)
        cp firmware.bin filaman_ota.bin
        
        # Create basic flash layout
        echo "Creating initial 4MB flash image..."
        dd if=/dev/zero bs=1M count=4 of=flash_4mb.bin
        
        # Create partition layout
        echo "Writing bootloader..."
        dd if=bootloader.bin of=flash_4mb.bin bs=1 seek=$((0x1000)) conv=notrunc
        
        echo "Writing partitions..."
        dd if=partitions.bin of=flash_4mb.bin bs=1 seek=$((0x8000)) conv=notrunc
        
        echo "Writing firmware..."
        dd if=firmware.bin of=flash_4mb.bin bs=1 seek=$((0x10000)) conv=notrunc
        
        echo "Writing SPIFFS..."
        dd if=spiffs.bin of=flash_4mb.bin bs=1 seek=$((0x3D0000)) conv=notrunc
        
        # Rename to final name
        cp flash_4mb.bin filaman_full.bin
        
        # Verify file sizes and content
        echo "File sizes:"
        ls -lh *.bin
        
        echo "Binary information:"
        esptool.py --chip esp32 image_info filaman_ota.bin || true
        echo "Full binary info:"
        xxd -l 64 filaman_full.bin

    - name: Create Release
      env:
        TOKEN: ${{ secrets.GITEA_TOKEN }}
      run: |
        TAG="${{ inputs.gitea_ref_name }}"
        API_URL="${{ inputs.gitea_server_url }}/api/v1"
        REPO="${{ inputs.gitea_repository }}"
        
        # Create release
        RESPONSE=$(curl -k -s \
          -X POST \
          -H "Authorization: token ${TOKEN}" \
          -H "Content-Type: application/json" \
          -d "{
            \"tag_name\":\"${TAG}\",
            \"name\":\"Release ${TAG}\",
            \"body\":\"${{ steps.changelog.outputs.CHANGES }}\"
          }" \
          "${API_URL}/repos/${REPO}/releases")
        
        RELEASE_ID=$(echo "$RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2 | head -n1)
        
        if [ -n "$RELEASE_ID" ]; then
          echo "Release created with ID: $RELEASE_ID"
          
          # Upload binaries
          cd .pio/build/esp32dev
          for file in filaman_full.bin filaman_ota.bin; do
            echo "Uploading $file..."
            curl -k -s \
              -X POST \
              -H "Authorization: token ${TOKEN}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary "@$file" \
              "${API_URL}/repos/${REPO}/releases/${RELEASE_ID}/assets?name=$file"
          done
        else
          echo "Failed to create release. Response:"
          echo "$RESPONSE"
          exit 1
        fi