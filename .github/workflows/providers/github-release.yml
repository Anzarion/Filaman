name: GitHub Release

on:
  workflow_call:

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'
    
    - name: Install PlatformIO
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade platformio esptool
    
    - name: Install xxd
      run: |
        sudo apt-get update
        sudo apt-get install xxd
    
    - name: Build Firmware
      run: |
        pio run -e esp32dev -t buildfs  # Build SPIFFS
        pio run -e esp32dev            # Build firmware
        cp .pio/build/esp32dev/firmware.bin .pio/build/esp32dev/filaman.bin
        cp .pio/build/esp32dev/spiffs.bin .pio/build/esp32dev/filaman_spiffs.bin
        
    - name: Prepare binaries
      run: |
        # Ensure we're in the project root
        cd $GITHUB_WORKSPACE
        
        # Create SPIFFS directory if it doesn't exist
        mkdir -p .pio/build/esp32dev/spiffs
        
        # Copy firmware to SPIFFS directory
        cp .pio/build/esp32dev/firmware.bin .pio/build/esp32dev/spiffs/firmware.bin
        
        # Build new SPIFFS image with firmware included
        pio run -t buildfs
        
        cd .pio/build/esp32dev
        
        # Create release files
        cp spiffs.bin filaman_spiffs.bin
        
        # Create full binary without filling unused space
        echo "Creating full binary..."
        esptool.py --chip esp32 merge_bin \
          --flash_mode dio \
          --flash_freq 40m \
          -o filaman_full.bin \
          0x1000 bootloader.bin \
          0x8000 partitions.bin \
          0x10000 firmware.bin \
          0x310000 spiffs.bin
        
        # Verify file sizes
        echo "File sizes:"
        ls -lh *.bin
    
    - name: Get version from tag
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Read CHANGELOG.md
      id: changelog
      run: |
        VERSION=${{ steps.get_version.outputs.VERSION }}
        CHANGELOG=$(awk "/## \\[$VERSION\\]/{p=1;print;next} /## \\[/{p=0} p" CHANGELOG.md)
        echo "CHANGES<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Check which files exist and create a list for upload
        cd .pio/build/esp32dev
        FILES_TO_UPLOAD=""
        for file in filaman_spiffs.bin filaman_full.bin; do
          if [ -f "$file" ]; then
            FILES_TO_UPLOAD="$FILES_TO_UPLOAD .pio/build/esp32dev/$file"
          else
            echo "Warning: $file not found"
          fi
        done
        
        # Create release with available files
        if [ -n "$FILES_TO_UPLOAD" ]; then
          gh release create "${{ github.ref_name }}" \
            --title "Release ${{ steps.get_version.outputs.VERSION }}" \
            --notes "${{ steps.changelog.outputs.CHANGES }}" \
            $FILES_TO_UPLOAD
        else
          echo "Error: No files found to upload"
          exit 1